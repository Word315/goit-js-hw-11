{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst dateTimePicker = document.getElementById(\"datetime-picker\");\nconst startButton = document.querySelector(\"[data-start]\");\nconst daysSpan = document.querySelector(\"[data-days]\");\nconst hoursSpan = document.querySelector(\"[data-hours]\");\nconst minutesSpan = document.querySelector(\"[data-minutes]\");\nconst secondsSpan = document.querySelector(\"[data-seconds]\");\n\nlet userSelectedDate = null;\nlet countdownInterval = null;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({ message: \"Please choose a date in the future\" });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  return {\n    days: Math.floor(ms / day),\n    hours: Math.floor((ms % day) / hour),\n    minutes: Math.floor(((ms % day) % hour) / minute),\n    seconds: Math.floor((((ms % day) % hour) % minute) / second),\n  };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction startCountdown() {\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n  countdownInterval = setInterval(() => {\n    const remainingTime = userSelectedDate - new Date();\n    if (remainingTime <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      dateTimePicker.disabled = false;\n      return;\n    }\n    updateTimerDisplay(convertMs(remainingTime));\n  }, 1000);\n}\n\nstartButton.addEventListener(\"click\", startCountdown);\n"],"names":["dateTimePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","countdownInterval","options","selectedDates","selectedDate","iziToast","flatpickr","convertMs","ms","addLeadingZero","value","updateTimerDisplay","days","hours","minutes","seconds","startCountdown","remainingTime"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAmB,KACnBC,EAAoB,KAExBN,EAAY,SAAW,GAEvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CAAE,QAAS,oCAAoC,CAAE,EAChEV,EAAY,SAAW,KAEvBK,EAAmBI,EACnBT,EAAY,SAAW,GAE1B,CACH,EAEAW,EAAUZ,EAAgBQ,CAAO,EAEjC,SAASK,EAAUC,EAAI,CAMrB,MAAO,CACL,KAAM,KAAK,MAAMA,EAAK,KAAG,EACzB,MAAO,KAAK,MAAOA,EAAK,MAAO,IAAI,EACnC,QAAS,KAAK,MAAQA,EAAK,MAAO,KAAQ,GAAM,EAChD,QAAS,KAAK,MAASA,EAAK,MAAO,KAAQ,IAAU,GAAM,CAC5D,CACH,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAmB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7DnB,EAAS,YAAca,EAAeG,CAAI,EAC1Cf,EAAU,YAAcY,EAAeI,CAAK,EAC5Cf,EAAY,YAAcW,EAAeK,CAAO,EAChDf,EAAY,YAAcU,EAAeM,CAAO,CAClD,CAEA,SAASC,GAAiB,CACxBrB,EAAY,SAAW,GACvBD,EAAe,SAAW,GAC1BO,EAAoB,YAAY,IAAM,CACpC,MAAMgB,EAAgBjB,EAAmB,IAAI,KAC7C,GAAIiB,GAAiB,EAAG,CACtB,cAAchB,CAAiB,EAC/BU,EAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,EAAG,EAChEjB,EAAe,SAAW,GAC1B,MACN,CACIiB,EAAmBJ,EAAUU,CAAa,CAAC,CAC5C,EAAE,GAAI,CACT,CAEAtB,EAAY,iBAAiB,QAASqB,CAAc"}